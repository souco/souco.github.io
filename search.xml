<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Spring Mail 发送邮件，没有主题，没有收件人，邮件内容显示乱码问题]]></title>
    <url>%2F2017%2F04%2F13%2Fcj6t0pgz00000m0nnzlsddvk7%2F</url>
    <content type="text"><![CDATA[使用 Spring Mail 发送邮件，在本地 Windows 环境下正常，部署到 linux 服务器的时候出现没有主题，没有收件人，邮件内容显示乱码的问题。过程：一开始发现邮件无法发送，报错，报错信息核心：554 DT:SPM根据网上搜索资料提示，发送邮件给配置的邮箱自己，发送成功，出现没有主题，没有收件人，邮件内容显示乱码的情况。初步认为是 linux 和 windows 环境差异问题，然而查了半天也没什么效果。然后又排查是否主机所在网络环境是否对发送出去的邮件做了过滤或者限制，也并没有。各种编码的方式也尝试过，也还是乱码。最后发现是 Jenkins 在集成编译的时候加了两个 jar 包：12geronimo-stax-api_1.0_spec-1.0.1.jargeronimo-javamail_1.4_spec-1.2.jar 然而这两个 jar 包在本地并没有，不知道是不是因为这样，本地环境邮件发送是正常的…将这两个 jar 包干掉，邮件正常发送。附网上同问题解决文章：JavaMail 发送邮件 无主题 无收件人 邮件内容乱码 解决Mark.]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用Git命令]]></title>
    <url>%2F2017%2F04%2F12%2Fcj6t0pgz90005m0nn5ysgx4ao%2F</url>
    <content type="text"><![CDATA[git init 初始化 Git git add README.md 将文件添加到暂存区域 git add . 将当前目录下的所有文件添加到暂存区域 git commit -m &quot;add a readme file&quot; 将文件提交到Git仓库 git clone https://github.com/n0tr00t/Sreg 克隆GitHub上别人的项目 git commit -am &quot;change the license file&quot; 一步实现add和commit git reset HEAD~ 把Git仓库的文件还原到暂存区域 git checkout 把暂存区域的文件还原到工作目录 git log 查看历史提交记录 git reset 11c2929 回滚到特定ID的快照 git reset --hard 31f46be 根据快照ID往前滚 git reflog 查看每次执行完命令，HEAD指向的版本号 git commit --amend -m &quot;新的提交说明&quot; 修改最后一次提交 git rm test.py 删除工作目录和暂存区域的文件（取消跟踪） git checkout -- README.md checkout单个文件 git mv game.py wordgame.py 重命名文件 git branch feature 创建分支 git log --decorate [--oneline] 查看当前分支情况[oneline单行查看] git log --oneline --decorate --graph --all 查看系统分支情况[graph绘制分支图,all显示所有分支] git checkout feature 切换分支 git merge feature 合并feature分支 git checkout -b feature2 创建一个新的分支feature2并checkout出来 git branch -d feature2 删除feature2分支 git branch -D feature 当feature分支当中有未合并的内容，也强行删除feature分支 git checkout HEAD~ 切换到匿名分支（当前版本上一个版本） 详谈checkout命令 git checkout HEAD~ README.md 当给定某个文件名时，Git 会从指定的提交中拷贝文件到暂存区域和工作目录 git checkout README.md 如果命令中没有给定具体的快照 ID ，则从暂存区域回复指定文件到工作目录 git checkout --README.md 如果存在README.md分支的话，指定恢复文件，而不是切换分支 其他说明 git status命令时显示On branch master说明我们位于一个叫做master的分支里，这是默认的分支。 git reset HEAD~命令中的HEAD~表示HEAD的上一个版本，如HEAD~~表示HEAD的上上个版本，HEAD~~~表示HEAD的上上个版本，HEAD~10表示HEAD之前第10个版本。 git reset --soft HEAD~表示只移动HEAD的指向，但并不会将快照回滚到暂存区域。（相当于撤销上一次的提交） git reset [--mixed(默认，可省略)] HEAD~将快照回滚到暂存区域。 git reset --hard HEAD~表示不仅移动HEAD的指向，将快照回滚到暂时区域，它还将暂存区域的文件还原到工作目录。 git commit --amend如果后面不附加提交说明的话，会进入修改说明的页面。可以使用快捷键Shift + z + z或者：q！退出。 git rm -f test.py要删除的文件在当前工作目录和暂存区域的内容不一致时，删除会跳出提示，此时添加-f参数即可。 git rm --cache test.py删除暂存区域的文件（保留工作目录的）。 echo *.temp &gt; .gitignore 创建一个.gitignore文件，并让 Git 忽略所有的.temp后缀的文件。 develop开发分支，feature功能分支，release预发布分支，hotfix维护分支。 reset会移动HEAD所在分支的指向，而checkout命令只会移动HEAD自身来指向另一个分支。所以，checkout命令更加安全。]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql快速创建数据和拥有此数据库所有权限的用户]]></title>
    <url>%2F2017%2F04%2F12%2Fcj6t0pgz80004m0nn49w1w31i%2F</url>
    <content type="text"><![CDATA[1234CREATE DATABASE `jsprun` CHARACTER SET utf8;CREATE USER 'jsprun'@'localhost' IDENTIFIED BY 'jsprun';#①用户名②本地③密码GRANT ALL PRIVILEGES ON jsprun.* TO 'jsprun'@'localhost';FLUSH PRIVILEGES; 其他参考：12345678910111213141、用管理员登陆mysql2、创建数据库create database db01;3、创建用户user01只能本地访问CREATE USER user01@&apos;localhost&apos; IDENTIFIED BY &apos;password1&apos;;user02可以远程访问CREATE USER user02@&apos;%&apos; IDENTIFIED BY &apos;password1&apos;;4、修改user01密码SET PASSWORD FOR &apos;user01&apos;@&apos;localhost&apos; = PASSWORD(&apos;password2&apos;);5、授权a)、user01管理db01全部权限GRANT ALL PRIVILEGES ON db01.* TO user01;b)、user02查看权限，并修改密码GRANT SELECT ON *.* TO &apos;user02&apos;@&apos;%&apos; IDENTIFIED by &apos;password2&apos;;]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IDEA内存参数配置]]></title>
    <url>%2F2017%2F04%2F11%2Fcj6t0pgz50001m0nno4cs77g6%2F</url>
    <content type="text"><![CDATA[IDEA内存参数配置 -Xms512m：JVM起始内存 -Xmx1280m：JVM分配最大内存 -XX:PermSize=300m：虚拟机为java永久生成对象内存配置，起始内存 -XX:MaxPermSize=512m：虚拟机为java永久生成对象内存配置，最大内存 Tomcat：-Xms512m -Xmx1280m -XX:PermSize=300m -XX:MaxPermSize=512m GWT：-Xms512m -Xmx1280m -XX:PermSize=256m -XX:MaxPermSize=512m GWT大内存配置：-Xms2048m -Xmx2048m -XX:PermSize=256m -XX:MaxPermSize=512m IDEA常用内存参数配置，每次配项目都是去查笔记，ctrl+c,ctrl+v…]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>IDEA内存</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[转]每天一个Linux命令(1)：ls命令]]></title>
    <url>%2F2017%2F04%2F10%2Fcj6t0pgza0006m0nntoq8ulck%2F</url>
    <content type="text"><![CDATA[[转]每天一个Linux命令(1)：ls命令 作者：peida链接：传送门 ls命令是linux下最常用的命令。ls命令就是list的缩写，缺省下ls用来打印出当前目录的清单。如果ls指定其他目录，那么就会显示指定目录里的文件及文件夹清单。 通过ls命令不仅可以查看linux文件夹包含的文件而且可以查看文件权限(包括目录、文件夹、文件权限)查看目录信息等等。ls命令在日常的linux操作中用的很多! 1. 命令格式：ls [选项] [目录名]2. 命令功能：列出目标目录中所有的子目录和文件。3. 常用参数： -a, 即单词all的意思，列出目录下的所有文件，包括以.开头的隐含文件-A, 同-a，但不列出.(表示当前目录)和..(表示当前目录的父目录)-c, 配合-lt：根据ctime排序及显示ctime(文件状态最后更改的时间)；配合-l：显示ctime但根据名称排序否则：根据ctime排序-C, 每栏由上至下列出项目–color[=WHEN],控制是否使用色彩分辨文件。WHEN可以是never、always或auto其中之一-d, –directory将目录象文件一样显示，而不是显示其下的文件。-D, –dired 产生适合 Emacs 的 dired 模式使用的结果-f, 对输出的文件不进行排序，-aU 选项生效，-lst 选项失效-g, 类似-l,但不列出所有者-G, –no-group 不列出任何有关组的信息-h, –human-readable 以容易理解的格式列出文件大小 (例如 1K 234M 2G)–si, 类似-h,但文件大小取1000的次方而不是1024-H, –dereference-command-line使用命令列中的符号链接指示的真正目的地–indicator-style=方式, 指定在每个项目名称后加上指示符号&lt;方式&gt;：none(默认)，classify(-F)，file-type(-p)-i, –inode印出每个文件的 inode 号-I, –ignore=样式 不印出任何符合shell万用字符&lt;样式&gt;的项目-k 即 –block-size=1K,以k字节的形式表示文件的大小。-l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来。-L, –dereference 当显示符号链接的文件信息时，显示符号链接所指示的对象而并非符号链接本身的信息-m, 所有项目以逗号分隔，并填满整行行宽-o, 类似-l,显示文件的除组信息外的详细信息。-r, –reverse依相反次序排列-R, –recursive同时列出所有子目录层-s, –size以块大小为单位列出所有文件的大小-S, 根据文件大小排序–sort=WORD, 以下是可选用的WORD和它们代表的相应选项：extension -X status -c none -U time -t size -S atime -u time -t access -u version -v use -u-t, 以文件修改时间排序-u, 配合-lt:显示访问时间而且依访问时间排序；配合-l:显示访问时间但根据名称排序；否则：根据访问时间排序-U, 不进行排序;依文件系统原有的次序列出项目-v, 根据版本进行排序-w, –width=COLS自行指定屏幕宽度而不使用目前的数值-x, 逐行列出项目而不是逐栏列出-X, 根据扩展名排序-1, 每行只列出一个文件–help 显示此帮助信息并离开–version 显示版本信息并离开 4. 常用范例：例一：列出/home/peidachang文件夹下的所有文件和目录的详细资料命令：ls -l -R /home/peidachang在使用ls命令时要注意命令的格式：在命令提示符后，首先是命令的关键字，接下来是命令参数，在命令参数之前要有一短横线“-”，所有的命令参数都有特定的作用，自己可以根据需要选用一个或者多个参数，在命令参数的后面是命令的操作对象。在以上这条命令ls -l -R /home/peidachang中，ls 是命令关键字，-l -R是参数，/home/peidachang是命令的操作对象。在这条命令中，使用到了两个参数，分别为l和R，当然，你也可以把他们放在一起使用，如下所示：命令：ls -lR /home/peidachang这种形式和上面的命令形式执行的结果是完全一样的。另外，如果命令的操作对象位于当前目录中，可以直接对操作对象进行操作;如果不在当前目录则需要给出操作对象的完整路径，例如上面的例子中，我的当前文件夹是peidachang文件夹，我想对home文件夹下的peidachang文件进行操作，我可以直接输入ls -lR peidachang，也可以用ls -lR /home/peidachang。 例二：列出当前目录中所有以“t”开头的目录的详细内容，可以使用如下命令：命令：ls -l t*可以查看当前目录下文件名以“t”开头的所有文件的信息。其实，在命令格式中，方括号内的内容都是可以省略的，对于命令ls而言，如果省略命令参数和操作对象，直接输入“ls”，则将会列出当前工作目录的内容清单。 例三：只列出文件下的子目录命令：ls -F /opt/soft |grep /$列出 /opt/soft 文件下面的子目录输出：1234[root@localhost opt]# ls -F /opt/soft |grep /$jdk1.6.0_16/subversion-1.6.1/tomcat6.0.32/ 命令：ls -l /opt/soft | grep “^d”列出 /opt/soft 文件下面的子目录详细情况输出：1234[root@localhost opt]# ls -l /opt/soft | grep &quot;^d&quot;drwxr-xr-x 10 root root 4096 09-17 18:17 jdk1.6.0_16drwxr-xr-x 16 1016 1016 4096 10-11 03:25 subversion-1.6.1drwxr-xr-x 9 root root 4096 2011-11-01 tomcat6.0.32 例四：列出目前工作目录下所有名称是s开头的档案，愈新的排愈后面，可以使用如下命令：命令：ls -ltr s*输出：123456789101112131415[root@localhost opt]# ls -ltr s*src:总计 0script:总计 0soft:总计 350644drwxr-xr-x 9 root root 4096 2011-11-01 tomcat6.0.32-rwxr-xr-x 1 root root 81871260 09-17 18:15 jdk-6u16-linux-x64.bindrwxr-xr-x 10 root root 4096 09-17 18:17 jdk1.6.0_16-rw-r--r-- 1 root root 205831281 09-17 18:33 apache-tomcat-6.0.32.tar.gz-rw-r--r-- 1 root root 5457684 09-21 00:23 tomcat6.0.32.tar.gz-rw-r--r-- 1 root root 4726179 10-10 11:08 subversion-deps-1.6.1.tar.gz-rw-r--r-- 1 root root 7501026 10-10 11:08 subversion-1.6.1.tar.gzdrwxr-xr-x 16 1016 1016 4096 10-11 03:25 subversion-1.6.1 例五：列出目前工作目录下所有档案及目录;目录于名称后加”/”, 可执行档于名称后加”*”命令：ls -AF输出：12[root@localhost opt]# ls -AFlog/ script/ soft/ src/ svndata/ web/ 例六：计算当前目录下的文件数和目录数命令：12ls -l * |grep “^-“|wc -l —文件个数ls -l * |grep “^d”|wc -l —目录个数 例七: 在ls中列出文件的绝对路径命令：ls | sed “s:^:pwd/:”输出：1234567[root@localhost opt]# ls | sed &quot;s:^:`pwd`/:&quot;/opt/log/opt/script/opt/soft/opt/src/opt/svndata/opt/web 例九：列出当前目录下的所有文件（包括隐藏文件）的绝对路径， 对目录不做递归命令：find $PWD -maxdepth 1 | xargs ls -ld输出：12345678[root@localhost opt]# find $PWD -maxdepth 1 | xargs ls -lddrwxr-xr-x 8 root root 4096 10-11 03:43 /optdrwxr-xr-x 2 root root 4096 2012-03-08 /opt/logdrwxr-xr-x 2 root root 4096 2012-03-08 /opt/scriptdrwxr-xr-x 5 root root 4096 10-11 03:21 /opt/softdrwxr-xr-x 2 root root 4096 2012-03-08 /opt/srcdrwxr-xr-x 4 root root 4096 10-11 05:22 /opt/svndatadrwxr-xr-x 4 root root 4096 10-09 00:45 /opt/web 例十：递归列出当前目录下的所有文件（包括隐藏文件）的绝对路径命令： find $PWD | xargs ls -ld例十一：指定文件时间输出格式命令：1ls -tl –time-style=full-iso 输出：123[root@localhost soft]# ls -tl --time-style=full-iso总计 350644drwxr-xr-x 16 1016 1016 4096 2012-10-11 03:25:58.000000000 +0800 subversion-1.6.1 1ls -ctl –time-style=long-iso 输出：12345[root@localhost soft]# ls -ctl --time-style=long-iso 总计 350644 drwxr-xr-x 16 1016 1016 4096 2012-10-11 03:25 subversion-1.6.1 扩展： 显示彩色目录列表打开/etc/bashrc, 加入如下一行:alias ls=”ls –color” 下次启动bash时就可以像在Slackware里那样显示彩色的目录列表了, 其中颜色的含义如下: 1. 蓝色–&gt;目录 2. 绿色–&gt;可执行文件 3. 红色–&gt;压缩文件 4. 浅蓝色–&gt;链接文件 5. 灰色–&gt;其他文件]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>每天一个linux命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[部署hexo到github遇到的坑]]></title>
    <url>%2F2017%2F04%2F06%2Fcj6t0ph15000um0nnu8kknjzn%2F</url>
    <content type="text"><![CDATA[其实 Hexo 的文档非常非常的详细。但是我一开始其实不是对着 Hexo 的文档部署，因为还有一些别的步骤，例如部分 Git 和 GitHub 的相关申请配置等等。所以遇到坑了吧。如下 项目deploy到 GitHub 后，访问总是404查了半天也没查出为啥。参照了别人的项目，发现少个CNAME文件，于是在 GitHub 加上去，结果成功了。郁闷的是重新发布过后又404了。看了下，CNAME文件又消失了。才想到每次生成网页，hexo/public下的文件都会被覆盖。于是查了下，不想被覆盖的内容需要放在hexo/resource目录下，如CNAME、favo.icon等文件。]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F04%2F06%2Fcj6t0ph17000wm0nnd3vickqv%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
